@page "/facturas/agregar"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Veterinaria.MAUIApp.Models
@inject Veterinaria.MAUIApp.Services.FacturaService FacturaService
@inject NavigationManager Nav

<div class="contenedor">
    <div class="status-bar-safe-area"></div>

    <header class="mb-4">
        <p class="titulo">Nueva factura</p>
        <p class="descripcion">Gestiona el registro y control</p>
    </header>

    <EditForm Model="@form" OnValidSubmit="@Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary class="mb-3" />

        <!-- CLIENTE -->
        <div class="input-container">
            <label class="label">Cliente</label>
            <InputSelect class="input" @bind-Value="form.ClienteId">
                <option value="">Seleccionar</option>
                @foreach (var c in clientes)
                {
                    <option value="@c.UsuarioId">
                        @(string.IsNullOrWhiteSpace(c.NombreCompleto) ? $"Usuario {c.UsuarioId}" : c.NombreCompleto)
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => form.ClienteId)" class="validation-message" />
        </div>

        <!-- CITA -->
        <div class="input-container">
            <label class="label">Cita</label>
            <InputSelect class="input" @bind-Value="form.CitaId">
                <option value="">Seleccionar</option>
                <option value="1">Cita #1 (demo)</option>
                <option value="2">Cita #2 (demo)</option>
            </InputSelect>
            <ValidationMessage For="@(() => form.CitaId)" class="validation-message" />
        </div>

        <!-- SERVICIO -->
        <div class="input-container">
            <label class="label">Servicio</label>
            <InputSelect class="input" @bind-Value="form.ServicioId" @onchange="OnServicioChanged">
                <option value="">Seleccionar</option>
                @foreach (var s in servicios)
                {
                    <option value="@s.Id">@s.Nombre (@(s.PrecioBase?.ToString("0.00") ?? "0.00"))</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => form.ServicioId)" class="validation-message" />
        </div>

        <!-- CANTIDAD -->
        <div class="input-container">
            <label class="label">Cantidad</label>
            <InputNumber class="input" @bind-Value="form.Cantidad" />
            <ValidationMessage For="@(() => form.Cantidad)" class="validation-message" />
        </div>

        <!-- PRECIO UNITARIO -->
        <div class="input-container">
            <label class="label">Precio unitario</label>
            <InputNumber class="input" step="0.01" inputmode="decimal" @bind-Value="form.PrecioUnitario" />
            <ValidationMessage For="@(() => form.PrecioUnitario)" class="validation-message" />
        </div>

        <!-- DESCUENTO -->
        <div class="input-container">
            <label class="label">Descuento (opcional)</label>
            <InputNumber class="input" step="0.01" inputmode="decimal" @bind-Value="form.Descuento" />
        </div>

        <!-- Motivo anulación (opcional) -->
        <div class="input-container">
            <label class="label">Motivo Anulación (Opcional)</label>
            <InputText class="input" placeholder="Ingresa un motivo opcional" @bind-Value="form.MotivoAnulacion" />
        </div>

        <!-- Barra de acciones -->
        <div class="acciones-footer">
            <button type="button" class="boton-negro" @onclick="@(() => Nav.NavigateTo("/facturas"))">
                Cancelar
            </button>
            <button type="submit" class="boton-verde" disabled="@guardando">
                @(guardando ? "Guardando..." : "Guardar cambios")
            </button>
        </div>
    </EditForm>
</div>

@code {
    // ---------- Estado UI ----------
    bool guardando = false;
    List<UsuarioMiniDTO> clientes = new();
    List<ServicioMiniDTO> servicios = new();

    // ---------- Form model ----------
    public class FacturaForm
    {
        [Required(ErrorMessage = "Selecciona un cliente")]
        public int? ClienteId { get; set; }

        // Si el backend permite null en cita_id, puedes dejarla sin Required
        public long? CitaId { get; set; }

        [Required(ErrorMessage = "Selecciona un servicio")]
        public long? ServicioId { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Cantidad debe ser > 0")]
        public int Cantidad { get; set; } = 1;

        [Range(typeof(decimal), "0.01", "9999999999", ErrorMessage = "Precio unitario inválido")]
        public decimal PrecioUnitario { get; set; }

        public decimal? Descuento { get; set; }
        public string? MotivoAnulacion { get; set; }
    }

    private readonly FacturaForm form = new();

    protected override async Task OnInitializedAsync()
    {
        // Clientes (rol 2)
        try { clientes = await FacturaService.ObtenerClientes(); }
        catch { clientes = await FacturaService.ObtenerClientesPorRol(); }

        // Servicios (activos)
        try { servicios = await FacturaService.ObtenerServiciosActivos(); }
        catch { servicios = new(); }
    }

    private void OnServicioChanged(ChangeEventArgs e)
    {
        // Autollenar precio unitario con el precio_base del servicio
        if (long.TryParse(e?.Value?.ToString(), out var sid))
        {
            var s = servicios.FirstOrDefault(x => x.Id == sid);
            if (s?.PrecioBase is not null)
                form.PrecioUnitario = s.PrecioBase.Value;
        }
    }

    private async Task Guardar()
    {
        if (guardando) return;
        guardando = true;

        try
        {
            // Si no eligieron cita, manda null (no 0)
            long? cita = (form.CitaId.HasValue && form.CitaId.Value > 0) ? form.CitaId : null;

            // Validaciones rápidas
            if (!form.ClienteId.HasValue || form.ClienteId.Value <= 0)
                throw new InvalidOperationException("Selecciona un cliente.");
            if (!form.ServicioId.HasValue || form.ServicioId.Value <= 0)
                throw new InvalidOperationException("Selecciona un servicio.");
            if (form.Cantidad <= 0)
                throw new InvalidOperationException("Cantidad debe ser > 0.");
            if (form.PrecioUnitario <= 0)
                throw new InvalidOperationException("Precio unitario debe ser > 0.");

            var req = new FacturaRequestDTO
            {
                ClienteId = (long)form.ClienteId!.Value,
                CitaId = cita,                // <- null si no hay cita
                Estado = "PENDIENTE",
                Detalles = new List<FacturaRequestDTO.DetalleRequestDTO>
        {
          new FacturaRequestDTO.DetalleRequestDTO
          {
            ServicioId      = form.ServicioId,   // long? -> se serializa ok
            TratamientoId   = null,
            DescripcionItem = null,
            Cantidad        = form.Cantidad,
            PrecioUnitario  = form.PrecioUnitario,
            Descuento       = form.Descuento ?? 0m
          }
        }
            };

            await FacturaService.CrearFactura(req);  // si 2xx
            Nav.NavigateTo("/facturas/index");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex); // aquí puedes disparar un toast
        }
        finally
        {
            guardando = false;
        }
    }
}

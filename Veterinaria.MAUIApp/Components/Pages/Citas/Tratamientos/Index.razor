@page "/tratamientos/{citaId:long}"
@using Veterinaria.MAUIApp.Models
@inject Veterinaria.MAUIApp.Services.TratamientosAplicadosService TratamientosService
@inject NavigationManager Navigation

<div class="container d-flex flex-column justify-content-between min-vh-100 py-3">

  <!-- Header con botón regresar (centrado perfecto) -->
  <div class="row align-items-center mb-3 g-0">
    <div class="col-auto">
      <button type="button"
              class="btn btn-light rounded-circle shadow-sm p-0 d-inline-flex align-items-center justify-content-center lh-1 flex-shrink-0"
              style="width:36px; height:36px;"
              @onclick='@(()=> Navigation.NavigateTo($"/citas/{citaId}"))'
              aria-label="Volver a la cita">
        <i class="bi bi-arrow-left-short fs-5"></i>
      </button>
    </div>
    <div class="col text-center">
      <h5 class="fw-bold mb-0">Tratamientos de la cita</h5>
      <small class="text-muted">Consulta y gestiona los tratamientos aplicados</small>
    </div>
    <div class="col-auto">
      <button class="btn btn-light rounded-circle p-0 d-inline-flex align-items-center justify-content-center lh-1 invisible"
              style="width:36px; height:36px;" aria-hidden="true">
        <i class="bi bi-arrow-left-short fs-5"></i>
      </button>
    </div>
  </div>

  <!-- Filtros (SIN 'Pendiente') -->
  <div class="btn-group w-100 mb-3" role="group">
    <button class='btn @(filtro == "todos" ? "btn-success" : "btn-outline-success")'
            @onclick='() => CambiarFiltro("todos")'>Todos</button>
    <button class='btn @(filtro == "planificado" ? "btn-success" : "btn-outline-success")'
            @onclick='() => CambiarFiltro("planificado")'>Planificado</button>
    <button class='btn @(filtro == "encurso" ? "btn-success" : "btn-outline-success")'
            @onclick='() => CambiarFiltro("encurso")'>En curso</button>
    <button class='btn @(filtro == "completado" ? "btn-success" : "btn-outline-success")'
            @onclick='() => CambiarFiltro("completado")'>Completado</button>
    <button class='btn @(filtro == "cancelado" ? "btn-success" : "btn-outline-success")'
            @onclick='() => CambiarFiltro("cancelado")'>Cancelado</button>
  </div>

  <!-- Contenido -->
  <div>
    @if (items is null)
    {
      <p><em>Cargando...</em></p>
    }
    else if (!Filtrados.Any())
    {
      <div class="text-center mt-5">
        <p class="fw-bold">No hay tratamientos</p>
        <small class="text-muted">Aún no se han registrado tratamientos para esta cita</small>
      </div>
    }
    else
    {
      @foreach (var t in Filtrados)
      {
        <div class="card border-0 shadow-none mb-3 p-3 rounded-4" style="box-shadow:none !important">
          <div class="d-flex justify-content-between align-items-center">
            <h6 class="fw-bold mb-0">Tratamiento #@t.TratamientoId</h6>
            <span class="small text-muted">ID: @t.Id</span>
          </div>

          <div class="mt-1">
            <span class="badge @GetEstadoBadge(t.Estado) rounded-pill">@MostrarEstado(t.Estado)</span>
            <span class="ms-2 text-muted small">Vet: @t.VeterinarioId</span>
          </div>

          @if (!string.IsNullOrWhiteSpace(t.Observaciones))
          {
            <p class="mt-2 mb-0 text-dark">@t.Observaciones</p>
          }

          <!-- Solo botón Editar -->
          <div class="d-flex justify-content-end gap-2 mt-2">
            <button class="btn btn-sm btn-dark rounded-pill px-3 py-1"
                    @onclick='@(()=> Navigation.NavigateTo($"/tratamientos/{citaId}/editar/{t.Id}"))'>
              Editar
            </button>
          </div>
        </div>
      }
    }
  </div>

  <!-- Botón fijo abajo -->
  <div class="mt-auto">
    <button class="btn btn-success w-100 py-2 rounded-pill shadow fw-bold"
            @onclick='@(()=> Navigation.NavigateTo($"/tratamientos/{citaId}/agregar"))'>
      Agregar nuevo tratamiento
    </button>
  </div>

</div>

@code {
  [Parameter] public long citaId { get; set; }

  private List<TratamientoAplicado>? items;
  private string filtro = "todos";

  // SIN 'Pendiente' (el backend ya inicia en Planificado)
  private static readonly string[] EstadosPermitidos = new[]
  { "Planificado","EnCurso","Completado","Cancelado" };

  protected override async Task OnInitializedAsync()
  {
    items = await TratamientosService.ListarPorCitaAsync(citaId);
  }

  private IEnumerable<TratamientoAplicado> Filtrados
    => (items ?? new()).Where(t => filtro switch
    {
      "planificado" => string.Equals(t.Estado, "Planificado", StringComparison.OrdinalIgnoreCase),
      "encurso"     => string.Equals(t.Estado, "EnCurso",     StringComparison.OrdinalIgnoreCase),
      "completado"  => string.Equals(t.Estado, "Completado",  StringComparison.OrdinalIgnoreCase),
      "cancelado"   => string.Equals(t.Estado, "Cancelado",   StringComparison.OrdinalIgnoreCase),
      _ => true
    });

  private void CambiarFiltro(string f) => filtro = (f ?? "todos").Trim().ToLowerInvariant();

  private string GetEstadoBadge(string? estado) => (estado ?? "").ToLowerInvariant() switch
  {
    "planificado" => "bg-info",
    "encurso"     => "bg-warning",
    "completado"  => "bg-success",
    "cancelado"   => "bg-danger",
    _             => "bg-light text-dark"
  };

  private string MostrarEstado(string? estado)
    => estado switch { "EnCurso" => "En curso", _ => estado ?? "—" };
}

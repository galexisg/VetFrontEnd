@page "/Citas/Editar/{Id:long}"
@using Veterinaria.MAUIApp.Models
@inject Veterinaria.MAUIApp.Services.CitaService CitaService
@inject NavigationManager Navigation

<h3 class="fw-bold mb-3">Editar Cita</h3>

@if (cita == null)
{
    <p><em>Cargando...Espere por favor</em></p>
}
else
{
    <EditForm Model="cita" OnValidSubmit="ActualizarCita">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label fw-semibold">Mascota Id</label>
            <InputNumber class="form-control form-control-lg rounded-4 shadow-sm" @bind-Value="cita.MascotaId" />
        </div>

        <div class="mb-3">
            <label class="form-label fw-semibold">Usuario Id</label>
            <InputNumber class="form-control form-control-lg rounded-4 shadow-sm" @bind-Value="cita.UsuarioId" />
        </div>

        <div class="mb-3">
            <label class="form-label fw-semibold">Fecha y Hora</label>
            <InputDate class="form-control form-control-lg rounded-4 shadow-sm" @bind-Value="cita.FechaHora" />
        </div>

        <div class="mb-3">
            <label class="form-label fw-semibold">Observaciones</label>
            <InputTextArea class="form-control form-control-lg rounded-4 shadow-sm" @bind-Value="cita.Observaciones" />
        </div>

        <button type="submit" class="btn btn-success btn-lg w-100 rounded-pill shadow-sm">Actualizar</button>
        <a href="/Citas/Index" class="btn btn-outline-secondary btn-lg w-100 mt-2 rounded-pill shadow-sm">Cancelar</a>
    </EditForm>
}

@code {
    [Parameter] public long Id { get; set; }
    private CitaRequest? cita;

    protected override async Task OnInitializedAsync()
    {
        var response = await CitaService.GetCitaByIdAsync(Id);
        if (response != null)
        {
            cita = new CitaRequest
            {
                MascotaId = response.MascotaId,
                UsuarioId = response.UsuarioId,
                VeterinarioId = response.VeterinarioId,
                MotivoId = response.MotivoId,
                CitaEstadoId = response.CitaEstadoId,
                FacturaId = response.FacturaId,
                Tipo = response.Tipo,
                FechaHora = response.FechaHora,
                Observaciones = response.Observaciones
            };
        }
    }

    private async Task ActualizarCita()
    {
        if (cita != null)
        {
            var updated = await CitaService.UpdateCitaAsync(Id, cita);
            if (updated != null)
            {
                Navigation.NavigateTo("/Citas/Index");
            }
        }
    }
}

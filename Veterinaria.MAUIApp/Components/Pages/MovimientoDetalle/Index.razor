@page "/movimientodetalle"
@using Veterinaria.MAUIApp.Models
@using Veterinaria.MAUIApp.Services
@inject NavigationManager NavManager
@inject MovimientoDetalleService MovimientoDetalleService // Inyecta el servicio de MovimientoDetalle

<style>
    /* Estilos mínimos para simular el diseño de "guía" */
    .page-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding-bottom: 1rem;
        margin-bottom: 1rem;
        border-bottom: 1px solid #e5e7eb; /* Separador */
    }

    .back-chip {
        background: #f3f4f6;
        border: none;
        border-radius: 9999px; /* Fully rounded */
        padding: 0.5rem;
        cursor: pointer;
        display: flex;
        align-items: center;
    }

        .back-chip svg {
            width: 24px;
            height: 24px;
            stroke: #374151; /* Color de icono */
            stroke-width: 2;
            fill: none;
            stroke-linecap: round;
            stroke-linejoin: round;
        }

    .d-grid {
        display: grid;
    }

    .gap-1 {
        gap: 0.25rem;
    }

    .gap-3 {
        gap: 1rem;
    }

    .page-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1f2937;
    }

    .page-subtitle {
        font-size: 0.875rem;
        color: #6b7280;
    }

    .card-list {
        background-color: white;
        padding: 1rem;
        border-radius: 0.75rem;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        margin-top: 1rem;
    }

    .card-tappable:hover {
        cursor: pointer;
        background-color: #f9fafb; /* Light hover effect */
    }

    .icon-chip {
        border-radius: 0.5rem;
        padding: 0.5rem;
        display: flex;
    }

        .icon-chip svg {
            width: 24px;
            height: 24px;
            stroke-width: 2;
            fill: none;
        }

    .titulo {
        font-weight: 600;
        color: #1f2937;
    }

    .descripcion {
        font-size: 0.875rem;
        color: #6b7280;
    }

    .boton-verde {
        background-color: #10b981; /* green-500 */
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-weight: 600;
        cursor: pointer;
        border: none;
    }

    /* Estilos de tabla adaptados para evitar dependencia completa de Tailwind */
    .w-full {
        width: 100%;
    }

    .text-sm {
        font-size: 0.875rem;
    }

    .text-left {
        text-align: left;
    }

    .text-gray-700 {
        color: #374151;
    }

    .text-gray-900 {
        color: #1f2937;
    }

    .px-4 {
        padding-left: 1rem;
        padding-right: 1rem;
    }

    .py-3 {
        padding-top: 0.75rem;
        padding-bottom: 0.75rem;
    }

    .font-semibold {
        font-weight: 600;
    }

    .font-medium {
        font-weight: 500;
    }

    .whitespace-nowrap {
        white-space: nowrap;
    }

    .text-blue-600 {
        color: #2563eb;
    }

    .text-red-600 {
        color: #dc2626;
    }

    .space-x-2 > * + * {
        margin-left: 0.5rem;
    }

    .overflow-x-auto {
        overflow-x: auto;
    }
</style>

<div class="page-header">
    <button type="button" class="back-chip" @onclick="NavigateToMenu" title="Volver al Menú">
        @* Icono de flecha SVG *@
        <svg viewBox="0 0 24 24" aria-hidden="true"><path d="M15 6l-6 6 6 6" /></svg>
    </button>

    <div class="d-grid gap-1">
        <div class="page-title">Detalle de Movimientos</div>
        <div class="page-subtitle">Registros detallados de entradas y salidas del stock.</div>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="card-list mt-3" style="border:1px solid #ffd5d5;background:#fff7f7;color:#b32121; display:flex; justify-content: space-between; align-items: center; gap:12px;">
        <div>
            <strong>ERROR AL CARGAR:</strong>
            <div class="mt-1">@errorMessage</div>
        </div>
        <button class="boton-card-sm btn btn-sm btn-outline-danger" @onclick="LoadMovimientoDetalles" style="flex-shrink: 0;">Reintentar</button>
    </div>
}
else if (isLoading)
{
    <div class="loading-message">Cargando detalles de movimientos...</div>
}
else if (movimientoDetalles == null)
{
    <div class="card-list mt-3">
        <p class="titulo mb-1">Cargar Registros</p>
        <p class="descripcion mb-2">Pulsa el botón para cargar los movimientos desde la API. (Asegúrate de haber iniciado sesión)</p>
        <button class="boton-verde" @onclick="LoadMovimientoDetalles">Cargar Datos</button>
    </div>
}
else if (movimientoDetalles.Count == 0)
{
    <div class="card-list mt-3">
        <p class="titulo mb-1">No hay movimientos detallados</p>
        <p class="descripcion mb-2">Crea un nuevo registro de movimiento para ver el detalle.</p>
        <button class="boton-verde" @onclick="NavigateToCreate">Crear Nuevo Detalle</button>
    </div>
}
else
{
    <div class="d-grid gap-3">
        <div class="card-list d-flex gap-3 align-items-center card-tappable" @onclick="NavigateToCreate">
            <div class="icon-chip" style="background: #eef2ff;">
                @* Icono de suma *@
                <svg viewBox="0 0 24 24" aria-hidden="true" style="stroke:#4f46e5;"><path d="M12 6v12M6 12h12" /></svg>
            </div>
            <div class="d-grid gap-1">
                <p class="titulo mb-0">Crear Nuevo Detalle</p>
                <div class="descripcion">Registrar la entrada o salida de un lote de medicamento.</div>
            </div>
        </div>

        <div class="card-list p-0 overflow-x-auto">
            <table class="w-full text-sm text-left text-gray-700">
                <thead style="background-color: #f9fafb; border-bottom: 1px solid #e5e7eb;">
                    <tr>
                        <th scope="col" class="px-4 py-3 font-semibold">Mov. ID</th>
                        <th scope="col" class="px-4 py-3 font-semibold">Medicamento</th>
                        <th scope="col" class="px-4 py-3 font-semibold">Lote</th>
                        <th scope="col" class="px-4 py-3 font-semibold">Cantidad</th>
                        <th scope="col" class="px-4 py-3 font-semibold">Costo</th>
                        <th scope="col" class="px-4 py-3 font-semibold">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in movimientoDetalles)
                    {
                        <tr style="border-bottom: 1px solid #f3f4f6;">
                            <td class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap">@item.MovimientoInventario?.Id</td>
                            <td class="px-4 py-3">@item.Medicamento?.Nombre</td>
                            <td class="px-4 py-3">@item.LoteMedicamento?.Id</td> @* Usamos CodigoLote para mejor visualización *@
                            <td class="px-4 py-3">@item.Cantidad</td>
                            <td class="px-4 py-3">@item.CostoUnitario.ToString("C2")</td>
                            <td class="px-4 py-3 space-x-2">
                                <a href="/movimientodetalle/editar/@item.Id" class="text-blue-600 hover:text-blue-800 text-xs font-medium">Editar</a>
                                <button class="text-red-600 hover:text-red-800 text-xs font-medium" @onclick="() => EliminarDetalle(item.Id)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<MovimientoDetalle>? movimientoDetalles;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    // 🚨 OnInitializedAsync se omite para dar el control de carga al usuario y evitar conflictos de login.

    private async Task LoadMovimientoDetalles()
    {
        errorMessage = string.Empty;
        isLoading = true;
        movimientoDetalles = null;
        StateHasChanged();

        try
        {
            // Este método en C# debe llamar al endpoint /api/movimientoDetalle/lista de tu API Spring Boot.
            movimientoDetalles = await MovimientoDetalleService.GetTodosAsync();
        }
        catch (Exception ex)
        {
            // Captura el error, ya sea de red, autenticación o deserialización.
            errorMessage = $"Error al cargar los detalles. Causa: {ex.InnerException?.Message ?? ex.Message}";
            movimientoDetalles = new List<MovimientoDetalle>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task EliminarDetalle(int id)
    {
        var confirmado = await App.Current.MainPage.DisplayAlert(
            "Confirmar Eliminación",
            $"¿Estás seguro de que quieres eliminar el Detalle de Movimiento ID: {id}?",
            "Sí",
            "No");

        if (confirmado)
        {
            try
            {
                // Reemplaza esto con tu llamada real al servicio:
                // bool success = await MovimientoDetalleService.EliminarAsync(id);
                // if (success) { await LoadMovimientoDetalles(); }

                await Task.Delay(500); // Simulación de espera
                await LoadMovimientoDetalles();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al intentar eliminar: {ex.Message}";
            }
        }
    }

    private void NavigateToCreate()
    {
        NavManager.NavigateTo("/movimientodetalle/agregar");
    }

    private void NavigateToMenu()
    {
        // Navega a la ruta de tu menú principal
        NavManager.NavigateTo("/login/menu");
    }
}
<<<<<<< HEAD
Ôªø@page "/bloqueshorario/crear"
@using Veterinaria.MAUIApp.Models
@using Veterinaria.MAUIApp.Services
@inject BloqueHorarioService BloqueHorarioService
@inject NavigationManager NavManager

<h3>Crear Nuevo Bloque de Horario</h3>

<EditForm Model="@nuevoBloque" OnValidSubmit="GuardarBloque" OnInvalidSubmit="OnInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-field">
        <label for="inicio">Hora de Inicio:</label>
        <InputText id="inicio" @bind-Value="nuevoBloque.Inicio" type="time" class="form-control" />
        <ValidationMessage For="@(() => nuevoBloque.Inicio)" />
    </div>

    <div class="form-field mt-3">
        <label for="fin">Hora de Fin:</label>
        <InputText id="fin" @bind-Value="nuevoBloque.Fin" type="time" class="form-control" />
        <ValidationMessage For="@(() => nuevoBloque.Fin)" />
    </div>

    <div class="form-check mt-3">
        <InputCheckbox id="activo" @bind-Value="nuevoBloque.Activo" class="form-check-input" />
        <label class="form-check-label" for="activo">Activo</label>
    </div>

    <div class="button-footer">
        <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancelar</button>
        <button type="submit" class="btn btn-primary">Guardar</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
        <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private BloqueHorarioRequest nuevoBloque = new();
    private string errorMessage = string.Empty;

    private async Task GuardarBloque()
    {
        errorMessage = string.Empty;

        try
        {
            var bloqueCreado = await BloqueHorarioService.CreateBloqueHorarioAsync(nuevoBloque);

            if (bloqueCreado != null)
            {
                NavManager.NavigateTo("/bloqueshorario", true); // Navegar y forzar recarga
            }
            else
            {
                errorMessage = "Hubo un error al guardar el bloque. Por favor, int√©ntelo de nuevo.";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error de conexi√≥n con la API: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocurri√≥ un error inesperado: {ex.Message}";
        }
    }

    private void OnInvalidSubmit()
    {
        errorMessage = "Por favor, completa todos los campos obligatorios.";
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/bloqueshorario");
    }
}
=======
Ôªø@page "/bloques-horario/crear"
@inject Veterinaria.MAUIApp.Services.BloqueHorarioService BloqueHorarioService
@inject NavigationManager Navigation
@using Veterinaria.MAUIApp.Models
@using static Veterinaria.MAUIApp.Models.BloqueHorario

<div class="container py-3">
    <h5 class="fw-bold mb-3">Nuevo Bloque</h5>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert @AlertClass mb-3">@Mensaje</div>
    }

    <EditForm Model="@nuevoBloque" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Hora de inicio -->
        <div class="mb-3">
            <label class="form-label">Hora de inicio</label>
            <InputSelect @bind-Value="horaInicio" class="form-select">
                <option value="">Selecciona hora</option>
                @foreach (var hora in horasDisponibles)
                {
                    <option value="@hora.Value">@hora.Text</option>
                }
            </InputSelect>
            @if (mostrarErrorInicio)
            {
                <div class="text-danger small">La hora de inicio es obligatoria</div>
            }
        </div>

        <!-- Hora de fin -->
        <div class="mb-3">
            <label class="form-label">Hora de fin</label>
            <InputSelect @bind-Value="horaFin" class="form-select">
                <option value="">Selecciona hora</option>
                @foreach (var hora in horasDisponibles)
                {
                    <option value="@hora.Value">@hora.Text</option>
                }
            </InputSelect>
            @if (mostrarErrorFin)
            {
                <div class="text-danger small">La hora de fin es obligatoria</div>
            }
        </div>

        <!-- Botones -->
        <div class="d-flex justify-content-between">
            <button class="btn btn-secondary" type="button" @onclick="Volver">
                Cancelar
            </button>

            <button class="btn btn-success" type="submit">
                Guardar
            </button>
        </div>
    </EditForm>
</div>

@code {
    private BloqueHorarioGuardarReq nuevoBloque = new();
    private string? horaInicio;
    private string? horaFin;

    private List<(string Value, string Text)> horasDisponibles = new();

    // ‚úÖ Mensajes
    private string Mensaje = "";
    private string AlertClass = "alert-success";
    private bool mostrarErrorInicio = false;
    private bool mostrarErrorFin = false;

    protected override void OnInitialized()
    {
        // Generar lista de horas en bloques de 30 minutos
        for (int h = 6; h <= 22; h++)
        {
            horasDisponibles.Add((
                new TimeSpan(h, 0, 0).ToString(@"hh\:mm"),
                DateTime.Today.AddHours(h).ToString("h:mm tt")
            ));
            horasDisponibles.Add((
                new TimeSpan(h, 30, 0).ToString(@"hh\:mm"),
                DateTime.Today.AddHours(h).AddMinutes(30).ToString("h:mm tt")
            ));
        }
    }

    private void Volver()
    {
        Navigation.NavigateTo("/bloques-horario/index");
    }

    private async Task Guardar()
    {
        // üîπ Validaciones simples antes de enviar
        mostrarErrorInicio = string.IsNullOrEmpty(horaInicio);
        mostrarErrorFin = string.IsNullOrEmpty(horaFin);
        Mensaje = "";

        if (mostrarErrorInicio || mostrarErrorFin)
        {
            AlertClass = "alert-danger";
            Mensaje = "Por favor completa todos los campos.";
            return;
        }

        var inicio = TimeSpan.Parse(horaInicio!);
        var fin = TimeSpan.Parse(horaFin!);

        if (fin <= inicio)
        {
            AlertClass = "alert-danger";
            Mensaje = "‚ö†Ô∏è La hora de fin debe ser mayor que la de inicio.";
            return;
        }

        // ‚úÖ Validar si YA EXISTE un bloque con el mismo rango (activos o inactivos)
        var existentes = await BloqueHorarioService.ListarTodosAsync();
        bool duplicado = existentes.Any(b =>
            b.Inicio == inicio && b.Fin == fin); // üîπ Se elimin√≥ el filtro b.Activo

        if (duplicado)
        {
            AlertClass = "alert-danger";
            Mensaje = "‚ùå Ya existe un bloque con el mismo horario (activo o inactivo).";
            return;
        }


        // Si pasa todas las validaciones, guardar
        nuevoBloque.Inicio = inicio;
        nuevoBloque.Fin = fin;

        var creado = await BloqueHorarioService.CrearAsync(nuevoBloque);
        if (creado != null)
        {
            AlertClass = "alert-success";
            Mensaje = "‚úÖ Bloque creado con √©xito.";
            await Task.Delay(1000); // peque√±a pausa para mostrar mensaje
            Navigation.NavigateTo("/bloques-horario/index");
        }
        else
        {
            AlertClass = "alert-danger";
            Mensaje = "‚ùå Ocurri√≥ un error al guardar el bloque.";
        }
    }
}
>>>>>>> cce7d4c545429baff3534df3b6bc33f01fcbd981

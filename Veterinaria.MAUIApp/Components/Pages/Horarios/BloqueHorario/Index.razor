<<<<<<< HEAD
Ôªø@page "/bloqueshorario"
@using Veterinaria.MAUIApp.Models
@using Veterinaria.MAUIApp.Services
@inject BloqueHorarioService BloqueHorarioService
@inject NavigationManager NavManager

<div class="page-container">
	<div class="header">
		<div class="mt-4">
			<button @onclick="atras" class="boton-verde">atras</button>
		</div>
		<div class="header-content">
			<h1>Bloques de Horario</h1>
			<p>Listado de los bloques de tiempo disponibles.</p>
		</div>
	</div>
	<div class="mt-4">
		<button @onclick="Crear" class="boton-verde">Crear Nuevo Horario</button>
	</div>
		<div class="mt-4">
		<button @onclick="dias" class="boton-verde">Administrar dias</button>
	</div>
	<div class="content">
		@if (bloquesHorario == null)
		{
			<div class="loading-container">
				<p><em>Cargando bloques de horario...</em></p>
			</div>
		}
		else if (bloquesHorario.Count == 0)
		{
			<div class="empty-state">
				<p>No se encontraron bloques de horario.</p>
			</div>
		}
		else
		{
			<div class="horarios-list">
				@foreach (var bloque in bloquesHorario)
				{
					<div class="horario-item">
						<div class="horario-info">
							<h4>@bloque.Inicio.ToString(@"hh\:mm") - @bloque.Fin.ToString(@"hh\:mm")</h4>
							<p>ID: @bloque.BloqueHorarioId</p>
						</div>
					</div>
				}
			</div>
		}
	</div>
</div>

@code {
	private List<BloqueHorario> bloquesHorario;

	protected override async Task OnInitializedAsync()
	{
		bloquesHorario = await BloqueHorarioService.GetBloquesHorarioAsync();
	}
	private void Crear()
	{
		NavManager.NavigateTo("/bloqueshorario/crear");
	}
		private void atras()
	{
		NavManager.NavigateTo("/agenda");
	}
	private void dias()
	{
		NavManager.NavigateTo("/test-dia");
	}
}
=======
Ôªø@page "/bloques-horario/index"
@inject Veterinaria.MAUIApp.Services.BloqueHorarioService BloqueHorarioService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using Veterinaria.MAUIApp.Models
@using static Veterinaria.MAUIApp.Models.BloqueHorario

<div class="container py-3">
    <!-- Encabezado -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="d-flex gap-2">
            <!-- ‚¨ÖÔ∏è Bot√≥n para regresar a la vista principal -->
            <button class="btn btn-secondary" @onclick="RegresarInicio">
                <i class="bi bi-arrow-left"></i> Regresar
            </button>
            <h5 class="fw-bold mb-0">Bloques de horario</h5>
        </div>

        <a class="btn btn-success" href="/bloques-horario/crear">
            <i class="bi bi-plus-circle"></i> Nuevo bloque
        </a>
    </div>

    <!-- Mensaje de operaci√≥n -->
    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert @AlertClass mb-3">@Mensaje</div>
    }

    <!-- Filtros -->
    <select class="form-select w-auto mb-3"
            @bind="filtroEstado"
            @bind:after="FiltrarBloques">
        <option value="Todos">Todos</option>
        <option value="Activos">Activos</option>
        <option value="Inactivos">Inactivos</option>
    </select>

    <!-- Lista de bloques -->
    @if (bloques is null)
    {
        <p>Cargando...</p>
    }
    else if (!bloques.Any())
    {
        <p>No hay bloques registrados.</p>
    }
    else
    {
        @foreach (var b in bloquesFiltrados)
        {
            <div class="card mb-2 shadow-sm">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <span>
                        <span class="badge bg-@(b.Activo ? "success" : "secondary") me-2">
                            @(b.Activo ? "Activo" : "Inactivo")
                        </span>
                        @b.Inicio.ToString(@"hh\:mm") - @b.Fin.ToString(@"hh\:mm")
                    </span>
                    <div class="d-flex gap-2">
                        <a class="btn btn-outline-primary btn-sm" href="/bloques-horario/editar/@b.Id">
                            Editar
                        </a>
                        @if (b.Activo)
                        {
                            <button class="btn btn-outline-danger btn-sm"
                                    @onclick="() => ConfirmarCambioEstado(b.Id, false)">
                                Desactivar
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-success btn-sm"
                                    @onclick="() => ConfirmarCambioEstado(b.Id, true)">
                                Activar
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<BloqueHorarioSalidaRes>? bloques;
    private List<BloqueHorarioSalidaRes> bloquesFiltrados = new();
    private string filtroEstado = "Todos";

    // üîπ Mensajes de operaci√≥n
    private string Mensaje = "";
    private string AlertClass = "alert-success";

    protected override async Task OnInitializedAsync()
    {
        await CargarBloques();
    }

    private async Task CargarBloques()
    {
        var activos = await BloqueHorarioService.ListarActivosAsync();
        var inactivos = await BloqueHorarioService.ListarInactivosAsync();

        bloques = activos.Concat(inactivos).ToList();
        FiltrarBloques();
    }

    private void FiltrarBloques()
    {
        if (bloques is null) return;

        bloquesFiltrados = filtroEstado switch
        {
            "Activos" => bloques.Where(b => b.Activo).ToList(),
            "Inactivos" => bloques.Where(b => !b.Activo).ToList(),
            _ => bloques.ToList()
        };
        StateHasChanged();
    }

    // ‚¨ÖÔ∏è Navegar a la vista principal
    private void RegresarInicio()
    {
        NavigationManager.NavigateTo("/login/menu");
    }

    // üîπ Confirmar y cambiar estado
    private async Task ConfirmarCambioEstado(int id, bool activar)
    {
        var mensaje = activar
            ? "¬øSeguro que deseas ACTIVAR este bloque?"
            : "¬øSeguro que deseas DESACTIVAR este bloque?";

        var confirmar = await JS.InvokeAsync<bool>("confirm", mensaje);
        if (!confirmar) return;

        bool ok = activar
            ? await BloqueHorarioService.ActivarAsync(id)
            : await BloqueHorarioService.DesactivarAsync(id);

        if (ok)
        {
            var bloque = bloques?.FirstOrDefault(b => b.Id == id);
            if (bloque != null) bloque.Activo = activar;

            MostrarMensaje($"‚úÖ Bloque {(activar ? "activado" : "desactivado")} con √©xito");
            FiltrarBloques();
        }
        else
        {
            MostrarMensaje("‚ùå Ocurri√≥ un error en la operaci√≥n", false);
        }
    }

    private void MostrarMensaje(string texto, bool exito = true)
    {
        Mensaje = texto;
        AlertClass = exito ? "alert-success" : "alert-danger";
        StateHasChanged();
    }
}
>>>>>>> cce7d4c545429baff3534df3b6bc33f01fcbd981

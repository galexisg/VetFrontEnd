@page "/agenda"
@using Veterinaria.MAUIApp.Models
@using Veterinaria.MAUIApp.Services
@inject AgendaService AgendaService
@inject NavigationManager navManager

<<<<<<< HEAD
<div class="page-container">
    <div class="header">
        <button class="back-button" @onclick="GoBack">
            <span class="material-icons">arrow_back</span>
        </button>
        <div class="header-content">
            <h1>Horarios</h1>
            <p>Gestiona el registro y control</p>
        </div>
        <div class="header-actions">
            <span class="material-icons">signal_cellular_alt</span>
            <span class="material-icons">wifi</span>
            <span class="material-icons">battery_full</span>
        </div>
    </div>

    <div class="content">
        <button class="add-button" @onclick="ShowAddHorario">
            <span class="add-icon">+</span>
            <div>
                <strong>Nuevo horario</strong>
                <p>Agregar un nuevo horario</p>
            </div>
        </button>

        <button class="add-button secondary" @onclick="ShowBloquesHorario">
            <span class="add-icon">⏰</span>
            <div>
                <strong>Bloques de horario</strong>
                <p>Gestiona los bloques disponibles</p>
            </div>
        </button>

        <div class="section-title">
            <h3>Gestiona tus horarios</h3>
        </div>

        <div class="search-container">
            <input type="text" placeholder="Buscar horarios..." @bind="searchText" @oninput="FilterHorarios" />
            <span class="material-icons search-icon">search</span>
        </div>

        @if (horarios == null)
        {
            <div class="loading-container">
                <p><em>Cargando horarios...</em></p>
            </div>
        }
        else if (filteredHorarios?.Any() == true)
        {
            <div class="horarios-list">
                @foreach (var horario in filteredHorarios)
                {
                    <div class="horario-item" @onclick="() => ShowHorarioDetail(horario)">
                        <div class="horario-info">
                            <span class="status-badge @(horario.Estado.ToLower())">@horario.Estado</span>
                            <h4>@horario.NombreVeterinario</h4>
                            <p>@horario.Dia - @horario.HoraInicio.ToString(@"hh\:mm") a @horario.HoraFin.ToString(@"hh\:mm")</p>
                        </div>
                        <span class="material-icons">more_vert</span>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <span class="material-icons">schedule</span>
                <p>No se encontraron horarios</p>
            </div>
        }
    </div>
</div>

@if (showBloquesModal)
{
    <BloquesHorario OnClose="CloseBloquesModal" />
}

@if (showHorarioDetailModal && selectedHorario != null)
{
    <HorarioDetail Horario="selectedHorario" OnClose="CloseHorarioDetail" OnSave="SaveHorario" />
}

@if (showAddHorarioModal)
{
    <AddHorario OnClose="CloseAddHorario" OnSave="SaveNewHorario" />
}
=======
<div class="schedule-page">

    <header class="app-header">
        <div class="header-left">
            <button class="icon-button" @onclick="GoBack">
                <span class="material-icons">arrow_back</span>
            </button>
            <div class="header-title">
                <h2>Horarios</h2>
                <p>Gestiona el registro y control</p>
            </div>
            <button class="btn btn-info text-white btn-sm d-flex align-items-center gap-1" @onclick="IrDia">
                <i class="bi bi-calendar-date"></i> Días
            </button>
        </div>
    </header>

    <div class="page-content-wrapper">

        <div class="main-actions-grid">

            <div class="action-card" @onclick="ShowAddHorario">
                <span class="material-icons action-icon" style="color: #00d4aa;">add_circle_outline</span>
                <div class="action-text">
                    <strong>Nuevo horario</strong>
                    <small>Agregar un nuevo horario</small>
                </div>
            </div>

            <div class="action-card" @onclick="ShowBloquesHorario">
                <span class="material-icons action-icon" style="color: #00d4aa;">schedule</span>
                <div class="action-text">
                    <strong>Bloques de horario</strong>
                    <small>Gestiona los bloques disponibles</small>
                </div>
            </div>
        </div>

        <div class="schedule-section">
            <h3>Gestiona tus horarios</h3>

            <div class="search-input-container">
                <span class="material-icons search-icon">search</span>
                <input type="text" placeholder="Buscar horarios..." @bind="searchText" @oninput="FilterHorarios" />
            </div>

            @if (horarios == null)
            {
                <div class="loading-container">
                    <p><em>Cargando horarios...</em></p>
                </div>
            }
            else if (filteredHorarios?.Any() == true)
            {
                <div class="schedule-list">
                    @foreach (var horario in filteredHorarios)
                    {
                        <div class="schedule-item" @onclick="() => ShowHorarioDetail(horario)">
                            <div class="item-status @(horario.Estado?.ToLower())"></div>

                            <div class="item-details">
                                <p class="item-day">@horario.Dia</p>
                                <p class="item-vet-time">
                                    @horario.NombreVeterinario <span class="time-range">| @horario.HoraInicio.ToString(@"hh\:mm") - @horario.HoraFin.ToString(@"hh\:mm")</span>
                                </p>
                            </div>
                            <span class="material-icons item-arrow">chevron_right</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <span class="material-icons empty-icon">schedule</span>
                    <p>No se encontraron horarios</p>
                </div>
            }
        </div>
    </div>
</div>

@* (Modal placeholders - puedes eliminarlos si solo usas navegación) *@
@* @if (showBloquesModal)
{
    <BloquesHorario OnClose="CloseBloquesModal" />
} *@
>>>>>>> cce7d4c545429baff3534df3b6bc33f01fcbd981

@code {
    private List<DetalleHorarioVeterinario> horarios;
    private List<DetalleHorarioVeterinario> filteredHorarios;
    private string searchText = "";
<<<<<<< HEAD
    private bool showBloquesModal = false;
    private bool showHorarioDetailModal = false;
    private bool showAddHorarioModal = false;
    private DetalleHorarioVeterinario selectedHorario;

    protected override async Task OnInitializedAsync()
    {
        horarios = await AgendaService.GetDetallesHorarioAsync();
=======

    [Inject]
    private NavigationManager NavManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Nota: Mantenemos la llamada a la API, sabiendo que puede fallar.
            horarios = await AgendaService.GetDetallesHorarioAsync();
        }
        catch (Exception)
        {
            // Muestra un estado vacío si falla la carga
            horarios = new List<DetalleHorarioVeterinario>();
        }
>>>>>>> cce7d4c545429baff3534df3b6bc33f01fcbd981
        filteredHorarios = horarios;
    }

    private void FilterHorarios(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";

        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredHorarios = horarios;
        }
        else
        {
<<<<<<< HEAD
            filteredHorarios = horarios?.Where(h => 
=======
            filteredHorarios = horarios?.Where(h =>
>>>>>>> cce7d4c545429baff3534df3b6bc33f01fcbd981
                h.NombreVeterinario.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                h.Dia.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                h.Estado.Contains(searchText, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

<<<<<<< HEAD
    private void ShowAddHorario()
    {
        navManager.NavigateTo("/horarios/detalle/crear");

    }

    private void ShowBloquesHorario()
    {
        navManager.NavigateTo("/bloqueshorario");
    }

    private void ShowHorarioDetail(DetalleHorarioVeterinario horario)
    {

        navManager.NavigateTo("/agenda/{id:int}");
    }

    private void CloseBloquesModal()
    {
        showBloquesModal = false;
    }

    private void CloseHorarioDetail()
    {
        showHorarioDetailModal = false;
        selectedHorario = null;
    }

    private void CloseAddHorario()
    {
        showAddHorarioModal = false;
    }

    private async Task SaveHorario(DetalleHorarioVeterinario horario)
    {
        CloseHorarioDetail();
        horarios = await AgendaService.GetDetallesHorarioAsync();
        filteredHorarios = horarios;
        StateHasChanged();
    }

    private async Task SaveNewHorario(DetalleHorarioVeterinario horario)
    {
        CloseAddHorario();
        horarios = await AgendaService.GetDetallesHorarioAsync();
        filteredHorarios = horarios;
        StateHasChanged();
    }

    private void GoBack()
    {
        navManager.NavigateTo("/");
    }
}
=======
    private void ShowAddHorario() => NavManager.NavigateTo("/horarios/detalle/crear");
    private void ShowBloquesHorario() => NavManager.NavigateTo("/bloques-horario/index");
    private void ShowHorarioDetail(DetalleHorarioVeterinario horario) => NavManager.NavigateTo($"/agenda/{horario.DetalleHorarioVeterinarioId}");
    private void GoBack() => NavManager.NavigateTo("/login/menu");
    private void IrDia() => NavManager.NavigateTo("/test-dia/index");
}
>>>>>>> cce7d4c545429baff3534df3b6bc33f01fcbd981

@page "/veterinarios/index"
@using Veterinaria.MAUIApp.Models
@inject VeterinarioService VetService
@inject NavigationManager Nav
@inject IJSRuntime js


<div class="vet-container">
    <div class="vet-header">
        <h2>Veterinarios (@(veterinarios?.Count ?? 0))</h2>
        <button class="btn btn-primaryxd" @onclick="Nuevo">
            Nuevo veterinario
        </button>
    </div>

    <div class="vet-filtros">
        <label class="form-label">Estado</label>
        <select class="form-select" @onchange="OnFiltroChanged" value="@filtroEstado">
            <option value="Todos">Todos</option>
            <option value="Activos">Activos</option>
            <option value="Inactivos">Inactivos</option>
        </select>
    </div>

    @if (veterinarios is null)
    {
        <div class="alert alert-info text-center">
            <span class="spinner-border spinner-border-sm me-2"></span>
            Cargando datos...
        </div>
    }
    else if (veterinarios.Count == 0)
    {
        <div class="alert alert-warning text-center">
            No hay veterinarios para mostrar.
        </div>
    }
    else
    {
        <div class="vet-lista">
            @foreach (var v in veterinarios)
            {
                <div class="vet-card">
                    <div class="vet-info">
                        <h5>@v.Usuario.NombreCompleto</h5>
                        <p><i class="bi bi-card-text"></i> Licencia: @v.NumeroLicencia</p>
                        <p><i class="bi bi-envelope"></i> @v.Usuario.Correo</p>
                        <p><i class="bi bi-phone"></i> @v.Usuario.Telefono</p>
                        <p><i class="bi bi-briefcase"></i> @v.Especialidad - @v.Servicio</p>
                        <span class="estado @(v.Estado == "Activo" ? "activo" : "inactivo")">
                            @v.Estado
                        </span>
                    </div>
                    <div class="vet-actions">
                        <button class="btn btn-outline-primary me-1" @onclick="() => Editar(v.Id)">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-outline-success me-1"
                                @onclick="() => ConfirmarActivar(v.Id)"
                                disabled="@(v.Estado == "Activo")">
                            <i class="bi bi-check-circle"></i>
                        </button>
                        <button class="btn btn-outline-danger"
                                @onclick="() => ConfirmarInactivar(v.Id)"
                                disabled="@(v.Estado == "Inactivo")">
                            <i class="bi bi-x-circle"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<VeterinarioSalidaRes>? veterinarios;
    private string filtroEstado = "Todos";

    protected override async Task OnInitializedAsync()
    {
        await CargarVeterinarios();
    }

    private async Task OnFiltroChanged(ChangeEventArgs e)
    {
        filtroEstado = e.Value?.ToString() ?? "Todos";
        await CargarVeterinarios();
    }

    private async Task CargarVeterinarios()
    {
        veterinarios = null;            // fuerza el loader
        StateHasChanged();

        try
        {
            // Elige el endpoint correcto
            veterinarios = filtroEstado switch
            {
                "Activos" => await VetService.ListarActivos(),
                "Inactivos" => await VetService.ListarInactivos(),
                _ => await VetService.ListarAsync()
            };

            // Normaliza para display
            veterinarios = veterinarios
              .Select(v =>
              {
                  v.Estado = ToPascalCase(v.Estado);
                  return v;
              })
              .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error cargando veterinarios: {ex.Message}");
            await js.InvokeVoidAsync("Swal.fire",
              new { icon = "error", title = "Error al cargar lista" });
        }
    }

    private void Nuevo() => Nav.NavigateTo("/veterinarios/agregar");
    private void Editar(int id) => Nav.NavigateTo($"/veterinarios/editar/{id}");

    private async Task ConfirmarActivar(int id)
    {
        var r = await js.InvokeAsync<SwalResult>("Swal.fire", new
        {
            title = "¿Activar veterinario?",
            icon = "question",
            showCancelButton = true,
            confirmButtonText = "Sí"
        });
        if (!r.IsConfirmed) return;

        var ok = await VetService.ActivarAsync(id);
        await js.InvokeVoidAsync("Swal.fire", new
        {
            toast = true,
            position = "top-end",
            icon = ok ? "success" : "error",
            title = ok ? "Activado" : "Error",
            timer = 1200,
            showConfirmButton = false
        });
        await CargarVeterinarios();
    }

    private async Task ConfirmarInactivar(int id)
    {
        var r = await js.InvokeAsync<SwalResult>("Swal.fire", new
        {
            title = "¿Inactivar veterinario?",
            icon = "warning",
            showCancelButton = true,
            confirmButtonText = "Sí"
        });
        if (!r.IsConfirmed) return;

        var ok = await VetService.InactivarAsync(id);
        await js.InvokeVoidAsync("Swal.fire", new
        {
            toast = true,
            position = "top-end",
            icon = ok ? "success" : "error",
            title = ok ? "Inactivado" : "Error",
            timer = 1200,
            showConfirmButton = false
        });
        await CargarVeterinarios();
    }

    private static string ToPascalCase(string? e) =>
      (e ?? "").Trim().ToUpper() switch
      {
          "ACTIVO" => "Activo",
          "INACTIVO" => "Inactivo",
          _ => "Desconocido"
      };

    private record SwalResult(bool IsConfirmed, bool IsDenied, bool IsDismissed);
}
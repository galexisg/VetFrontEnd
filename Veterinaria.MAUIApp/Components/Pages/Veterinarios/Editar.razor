@page "/veterinarios/editar/{Id:int}"
@using Veterinaria.MAUIApp.Models
@using Veterinaria.MAUIApp.Models.Dtos
@inject Veterinaria.MAUIApp.Services.VeterinarioService VetService
@inject Veterinaria.MAUIApp.Services.UsuarioService UsuarioService
@inject Veterinaria.MAUIApp.Services.EspecialidadService EspecialidadService
@inject Veterinaria.MAUIApp.Services.ServicioService ServicioService
@inject NavigationManager Nav
<link rel="stylesheet" href="css/veterinarios.css" />

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Editar Veterinario @modelo?.Id</h5>
        </div>
        <div class="card-body">
            @if (modelo is null || usuarios is null || especialidades is null || servicios is null)
            {
                <div class="alert alert-info text-center">
                    <span class="spinner-border spinner-border-sm me-2"></span> Cargando datos...
                </div>
            }
            else
            {
                <EditForm Model="modelo" OnValidSubmit="Guardar">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Número de Licencia:</label>
                        <InputText @bind-Value="modelo.NumeroLicencia" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Usuario:</label>
                        <InputSelect @bind-Value="modelo.UsuarioId" class="form-control">
                            @foreach (var u in usuarios)
                            {
                                <option value="@u.Id">@u.NombreCompleto</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Especialidad:</label>
                        <InputSelect @bind-Value="modelo.EspecialidadId" class="form-control">
                            @foreach (var esp in especialidades)
                            {
                                <option value="@esp.EspecialidadId">@esp.Nombre</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Servicio:</label>
                        <InputSelect @bind-Value="modelo.ServicioId" class="form-control">
                            @foreach (var srv in servicios)
                            {
                                <option value="@srv.Id">@srv.Nombre</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Estado:</label>
                        <InputSelect @bind-Value="modelo.Estado" class="form-control">
                            <option value="Activo">Activo</option>
                            <option value="Inactivo">Inactivo</option>
                        </InputSelect>
                    </div>

                    <div class="d-flex justify-content-end gap-2">
                        <button type="submit" class="btn btn-success">
                            <i class="bi bi-check-circle me-1"></i> Guardar
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                            <i class="bi bi-x-circle me-1"></i> Cancelar
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private VeterinarioModificarReq? modelo; // ← ESTA ES LA VARIABLE QUE FALTABA
    private List<UsuarioRes>? usuarios;
    private List<EspecialidadSalidaRes>? especialidades;
    private List<ServicioRes>? servicios;

    protected override async Task OnInitializedAsync()
    {
        usuarios = await UsuarioService.GetUsuariosAsync();
        especialidades = await EspecialidadService.GetActivasAsync();
        servicios = await ServicioService.ObtenerActivosAsync();

        var lista = await VetService.GetAllAsync();
        var actual = lista.FirstOrDefault(x => x.Id == Id);

        if (actual is not null)
        {
            modelo = new VeterinarioModificarReq
                {
                    Id = actual.Id,
                    NumeroLicencia = actual.NumeroLicencia,
                    UsuarioId = actual.Usuario.Id,
                    EspecialidadId = especialidades.FirstOrDefault(e => e.Nombre == actual.Especialidad)?.EspecialidadId ?? 0,
                    ServicioId = servicios.FirstOrDefault(s => s.Nombre == actual.Servicio)?.Id ?? 0,
                    Estado = actual.Estado
                };
        }
    }

    private async Task Guardar()
    {
        if (modelo is not null)
        {
            var actualizado = await VetService.UpdateAsync(Id, modelo);
            if (actualizado is not null)
                Nav.NavigateTo("/veterinarios/index", forceLoad: true);
        }
    }

    private void Cancelar() => Nav.NavigateTo("/");
}

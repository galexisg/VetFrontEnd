@page "/veterinarios/editar/{Id:int}"
@using Veterinaria.MAUIApp.Models
@inject VeterinarioService veterinarioService
@inject EspecialidadService especialidadService
@inject ServicioService servicioService
@inject NavigationManager nav

<link rel="stylesheet" href="css/veterinarios.css" />

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Editar Veterinario @modelo?.Id</h5>
        </div>
        <div class="card-body">
            @if (modelo is null || usuarios.Count == 0 || especialidades.Count == 0 || servicios.Count == 0)
            {
                <div class="alert alert-info text-center">
                    <span class="spinner-border spinner-border-sm me-2"></span> Cargando datos...
                </div>
            }
            else
            {
                <EditForm Model="modelo" OnValidSubmit="Guardar">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Número de Licencia</label>
                        <InputText @bind-Value="modelo.NumeroLicencia" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Usuario</label>
                        <InputSelect @bind-Value="modelo.UsuarioId" class="form-select">
                            <option value="">-- Selecciona un usuario --</option>
                            @foreach (var u in usuarios)
                            {
                                <option value="@u.Id">@u.NombreCompleto</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Especialidad</label>
                        <InputSelect @bind-Value="modelo.EspecialidadId" class="form-select">
                            <option value="">-- Selecciona una especialidad --</option>
                            @foreach (var esp in especialidades)
                            {
                                <option value="@esp.EspecialidadId">@esp.Nombre</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Servicio</label>
                        <InputSelect @bind-Value="modelo.ServicioId" class="form-select">
                            <option value="">-- Selecciona un servicio --</option>
                            @foreach (var srv in servicios)
                            {
                                <option value="@srv.Id">@srv.Nombre</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Estado</label>
                        <InputSelect @bind-Value="modelo.Estado" class="form-select">
                            <option value="Activo">Activo</option>
                            <option value="Inactivo">Inactivo</option>
                        </InputSelect>
                    </div>

                    <div class="d-flex justify-content-end gap-2">
                        <button type="submit" class="btn btn-success">Guardar</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@if (usuarios.Count == 0)
{
    <div class="alert alert-danger mt-3">⚠️ No se cargaron usuarios con rol Veterinario.</div>
}
@if (especialidades.Count == 0)
{
    <div class="alert alert-danger mt-3">⚠️ No se cargaron especialidades.</div>
}
@if (servicios.Count == 0)
{
    <div class="alert alert-danger mt-3">⚠️ No se cargaron servicios.</div>
}

@code {
    [Parameter] public int Id { get; set; }

    private VeterinarioModificarReq? modelo;
    private List<UsuarioSalidaRes> usuarios = new();
    private List<EspecialidadSalidaRes> especialidades = new();
    private List<Servicio> servicios = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 🔹 Solo usuarios con rol Veterinario
            usuarios = await veterinarioService.ListarUsuariosVeterinariosAsync();

            especialidades = await especialidadService.GetActivasAsync();
            servicios = await servicioService.ListarAsync(activo: true);

            var actual = await veterinarioService.ObtenerAsync(Id);

            if (actual is not null)
            {
                modelo = new VeterinarioModificarReq
                    {
                        Id = actual.Id,
                        NumeroLicencia = actual.NumeroLicencia,
                        UsuarioId = actual.Usuario.Id,
                        EspecialidadId = (int)(especialidades.FirstOrDefault(e => e.Nombre == actual.Especialidad)?.EspecialidadId ?? 0),
                        ServicioId = (long)(servicios.FirstOrDefault(s => s.Nombre == actual.Servicio)?.Id ?? 0),
                        Estado = actual.Estado
                    };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
        }
    }

    private async Task Guardar()
    {
        if (modelo is not null)
        {
            var ok = await veterinarioService.EditarAsync(Id, modelo);
            if (ok)
                nav.NavigateTo("/veterinarios/index", forceLoad: true);
            else
                Console.WriteLine("Error al actualizar veterinario.");
        }
    }

    private void Cancelar() => nav.NavigateTo("/veterinarios/index");
}

@page "/clientes/index"
@inject Services.UsuarioService UsuarioService
@inject NavigationManager navManager

<div class="header-section mt-4 mb-4 d-flex justify-content-between align-items-center">
    <h2 style="font-size:20;">Clientes</h2>
    <button class="boton-card" @onclick="Logout" >Cerrar sesión</button>
</div>

@if (usuarios != null && usuarios.Any())
{
    <div class="usuarios-grid d-grid gap-3">

        <!-- Card para crear nuevo cliente -->
        <div class="card-list d-flex gap-3 align-items-center" @onclick="NuevoUsuario">
            <div class="img-add d-flex justify-content-center align-items-center">
                <div>+</div>
            </div>

            <div class="d-grid gap-1">
                <p class="titulo">Nuevo cliente</p>
                <div class="descripcion">Agrega un nuevo cliente a la veterinaria</div>
            </div>
        </div>

        <h3 class="titulo mt-4">Gestiona tus clientes</h3>

        <!-- Input de búsqueda -->
        <input placeholder="Buscar un cliente..." class="input " type="text" @bind="filtroNombre" @bind:event="oninput" />

        <!-- Filtro por estado -->
        <div class="d-flex gap-2 mb-3" style="width: 100%;">
            <select class="input" @bind="filtroEstado">
                <option value="">Buscar activos o inactivos</option>
                <option value="ACTIVO">Clientes activos</option>
                <option value="INACTIVO">Clientes Inactivos</option>
            </select>
        </div>

        <!-- Lista filtrada -->
        @if (UsuariosFiltrados.Any())
        {
            @foreach (var usuario in UsuariosFiltrados)
            {
                <div class="card-list" @onclick="() => EditarUsuario(usuario.Id)">
                    <div class="d-grid gap-2">
                        <h5 class="titulo">@usuario.NombreCompleto</h5>
                        <p class="descripcion">@usuario.Direccion</p>
                    </div>
                    <div class="d-flex gap-2">
                        <p class="etiqueta">@usuario.Telefono</p>
                        <p class="etiqueta">@usuario.Correo</p>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button class="boton-card" @onclick:stopPropagation="true" @onclick="() => ActivarDesactivarUsuario(usuario)">
                            @(usuario.Estado == "ACTIVO" ? "Desactivar" : "Activar")
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="descripcion mt-3">No se encontraron clientes con los filtros seleccionados.</div>
        }
    </div>
}
else
{
    <div class="loading-message">
        Cargando usuarios...
    </div>
}

@code {
    private List<Models.Usuario> usuarios = new List<Models.Usuario>();
    private string filtroNombre = string.Empty;
    private string filtroEstado = string.Empty;

    // Lista filtrada por nombre y estado
    private IEnumerable<Models.Usuario> UsuariosFiltrados =>
        usuarios
            .Where(u => string.IsNullOrWhiteSpace(filtroNombre) || u.NombreCompleto.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase))
            .Where(u => string.IsNullOrWhiteSpace(filtroEstado) || u.Estado == filtroEstado);

    protected override async Task OnInitializedAsync()
    {
        usuarios = await UsuarioService.GetAllAsync();
    }

    private void NuevoUsuario()
    {
        navManager.NavigateTo("/clientes/agregar");
    }

    private void EditarUsuario(int id)
    {
        navManager.NavigateTo($"/clientes/editar/{id}");
    }

    private async Task ActivarDesactivarUsuario(Models.Usuario u)
    {
        if (u.Estado == "ACTIVO")
            await UsuarioService.DesactivarAsync(u.Id);
        else
            await UsuarioService.ActivarAsync(u.Id);

        usuarios = await UsuarioService.GetAllAsync(); // refrescar tabla
    }

    private void Logout()
    {
        // Limpiar token u otros datos de sesión
        App.Token = null;

        // Redirigir al login
        navManager.NavigateTo("/login/login");
    }

}

@page "/especialidades/index"
@using Veterinaria.MAUIApp.Services
@using Veterinaria.MAUIApp.Models
@inject EspecialidadService EspecialidadService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="container py-3">
    <!-- Encabezado -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="d-flex gap-2">
            <!-- 🔙 Botón simple para regresar -->
            <button class="btn btn-secondary" @onclick="Volver">
                ← Regresar
            </button>
            <h5 class="fw-bold mb-0">Especialidades</h5>
        </div>

        <a class="btn btn-success" href="/especialidades/nueva">
            <i class="bi bi-plus-circle"></i> Nueva especialidad
        </a>
    </div>

    <!-- Mensaje de operación -->
    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <div class="alert @AlertClass mb-3">@Mensaje</div>
    }

    <!-- Filtros -->
    <select class="form-select w-auto mb-3"
            @bind="filtroEstado"
            @bind:after="FiltrarEspecialidades">
        <option value="Todas">Todas</option>
        <option value="Activas">Activas</option>
        <option value="Inactivas">Inactivas</option>
    </select>

    <!-- Lista de especialidades -->
    @if (todasEspecialidades is null)
    {
        <p>Cargando...</p>
    }
    else if (!especialidadesFiltradas.Any())
    {
        <p>No hay especialidades registradas.</p>
    }
    else
    {
        @foreach (var esp in especialidadesFiltradas)
        {
            <div class="card mb-2 shadow-sm">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <span>
                        <span class="badge bg-@(esp.Activo ? "success" : "secondary") me-2">
                            @(esp.Activo ? "Activo" : "Inactivo")
                        </span>
                        @esp.Nombre
                    </span>
                    <div class="d-flex gap-2">
                        <a class="btn btn-outline-primary btn-sm" href="/especialidades/editar/@esp.EspecialidadId">
                            Editar
                        </a>
                        @if (esp.Activo)
                        {
                            <button class="btn btn-outline-danger btn-sm"
                                    @onclick="() => ConfirmarCambioEstado(esp.EspecialidadId, false)">
                                Desactivar
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-success btn-sm"
                                    @onclick="() => ConfirmarCambioEstado(esp.EspecialidadId, true)">
                                Activar
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<Especialidad>? todasEspecialidades;
    private List<Especialidad> especialidadesFiltradas = new();
    private string filtroEstado = "Todas";

    // 🔹 Mensajes
    private string Mensaje = "";
    private string AlertClass = "alert-success";

    protected override async Task OnInitializedAsync()
    {
        // Cargar todos (activos + inactivos)
        var activas = await EspecialidadService.GetActivosAsync();
        var inactivas = await EspecialidadService.GetInactivosAsync();
        todasEspecialidades = activas.Concat(inactivas).ToList();
        FiltrarEspecialidades();
    }

    private void FiltrarEspecialidades()
    {
        if (todasEspecialidades is null) return;

        especialidadesFiltradas = filtroEstado switch
        {
            "Activas" => todasEspecialidades.Where(e => e.Activo).ToList(),
            "Inactivas" => todasEspecialidades.Where(e => !e.Activo).ToList(),
            _ => todasEspecialidades.ToList()
        };
        StateHasChanged();
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/login/menu");
    }

    // 🔹 Confirmar y cambiar estado
    private async Task ConfirmarCambioEstado(int id, bool activar)
    {
        var mensaje = activar
            ? "¿Seguro que deseas ACTIVAR esta especialidad?"
            : "¿Seguro que deseas DESACTIVAR esta especialidad?";

        var confirmar = await JS.InvokeAsync<bool>("confirm", mensaje);
        if (!confirmar) return;

        bool ok = activar
            ? await EspecialidadService.ActivarAsync(id)
            : await EspecialidadService.DesactivarAsync(id);

        if (ok)
        {
            var esp = todasEspecialidades?.FirstOrDefault(e => e.EspecialidadId == id);
            if (esp != null) esp.Activo = activar;

            MostrarMensaje($"✅ Especialidad {(activar ? "activada" : "desactivada")} con éxito");
            FiltrarEspecialidades();
        }
        else
        {
            MostrarMensaje("❌ Ocurrió un error en la operación", false);
        }
    }

    private void MostrarMensaje(string texto, bool exito = true)
    {
        Mensaje = texto;
        AlertClass = exito ? "alert-success" : "alert-danger";
        StateHasChanged();
    }
}


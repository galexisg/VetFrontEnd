@page "/motivos/editar/{Id:int}"  
@using Veterinaria.MAUIApp.Services
@using Veterinaria.MAUIApp.Models
@using Veterinaria.MAUIApp.Models.Dtos
@inject MotivoService MotivoService
@inject NavigationManager Navigation

<h3>Editar Motivo</h3>

@if (cargando)
{
    <p><em>Cargando motivo...</em></p>
}
else if (errorMsg is not null)
{
    <div class="alert alert-danger">@errorMsg</div>
}
else if (motivoParaEditar is null)
{
    <p><em>No se encontró el motivo.</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="mb-2">
                <label class="form-label">ID:</label>
                <InputNumber class="form-control" @bind-Value="motivoParaEditar.Id" Disabled="true" />
            </div>
            <div class="mb-2">
                <label class="form-label">Nombre:</label>
                <InputText class="form-control" @bind-Value="motivoParaEditar.Nombre" />
            </div>
            <button class="btn btn-primary" @onclick="ActualizarMotivo">Actualizar</button>
            <button class="btn btn-link" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }  // <- ahora int

    private bool cargando = true;
    private string? errorMsg;

    private MotivoRequest? motivoParaEditar;

    protected override async Task OnParametersSetAsync()
    {
        cargando = true;
        errorMsg = null;

        try
        {
            // Si tu API recibe short, convierte aquí:
            short idShort = checked((short)Id);

            var motivoExistente = await MotivoService.ObtenerPorId(idShort);
            motivoParaEditar = motivoExistente is null
                ? null
                : new MotivoRequest
                {
                    Id = motivoExistente.Id,
                    Nombre = motivoExistente.Nombre
                };
        }
        catch (Exception ex)
        {
            errorMsg = $"Error cargando motivo: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task ActualizarMotivo()
    {
        if (motivoParaEditar is null) return;

        try
        {
            short idShort = checked((short)Id);
            var actualizado = await MotivoService.Editar(idShort, motivoParaEditar);
            if (actualizado is not null)
                Navigation.NavigateTo("/motivos");
            else
                errorMsg = "No se pudo actualizar el motivo.";
        }
        catch (Exception ex)
        {
            errorMsg = $"Error al actualizar: {ex.Message}";
        }
    }

    private void Cancelar() => Navigation.NavigateTo("/motivos");
}
